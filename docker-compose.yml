version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15
    container_name: goni-postgres
    environment:
      POSTGRES_DB: goni
      POSTGRES_USER: goniadmin
      POSTGRES_PASSWORD: shsbsy70
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - goni-network
    restart: unless-stopped

  # pgAdmin (PostgreSQL 관리 도구)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: goni-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@goni.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - goni-network
    restart: unless-stopped
    depends_on:
      - postgres

  # FastAPI 백엔드
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: goni-backend
    environment:
      DATABASE_URL: postgresql://goniadmin:shsbsy70@postgres:5432/goni
      SECRET_KEY: goni-secret-key-for-development-only
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
    ports:
      - "8000:8000"
    volumes:
      - ./back:/app
    networks:
      - goni-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Next.js 프론트엔드
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: goni-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./front:/app
      - /app/node_modules
    networks:
      - goni-network
    restart: unless-stopped
    depends_on:
      - backend
    command: npm run dev

  # Python 분석 서비스
  analyzer:
    build:
      context: ./analyze
      dockerfile: Dockerfile
    container_name: goni-analyzer
    environment:
      DATABASE_URL: postgresql://goniadmin:shsbsy70@postgres:5432/goni
      ANALYSIS_SCHEDULE_HOUR: 9
      REALTIME_MONITORING_INTERVAL: 30
    volumes:
      - ./analyze:/app
    networks:
      - goni-network
    restart: unless-stopped
    depends_on:
      - postgres
    command: python main.py

  # Redis (캐싱 및 세션 관리용)
  redis:
    image: redis:7-alpine
    container_name: goni-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - goni-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  goni-network:
    driver: bridge